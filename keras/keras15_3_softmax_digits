import numpy as np
from sklearn. datasets import load_digits
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.python.keras.models import Sequential 
from tensorflow.python.keras.layers import Dense 
from sklearn.metrics import accuracy_score 

#1. 데이터
datasets = load_digits()
x = datasets.data
y= datasets.target

print(x.shape, y.shape) #(1797, 64) #(1797,)
print(np.unique(y)) #[0 1 2 3 4 5 6 7 8 9]

import tensorflow as tf
tf.random.set_seed(66)

from tensorflow.keras.utils import to_categorical 
y = to_categorical(y)

x_train, x_test, y_train, y_test = train_test_split( x, y, train_size = 0.8, shuffle=True, random_state=68 )

##### digits데이터 시각화 방법 ######
import matplotlib.pyplot as plt
plt.grid()
plt.matshow(datasets.images[2])
plt.show()


#2. 모델구성

model = Sequential()
model.add(Dense(5,input_dim = 64))
model.add(Dense(10, activation='relu'))
model.add(Dense(25, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(10, activation='softmax'))  


#3. 컴파일, 훈련
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


from tensorflow.python.keras.callbacks import EarlyStopping
earlyStopping = EarlyStopping(monitor='val_loss', patience=300, mode='auto', verbose=1, 
                              restore_best_weights=True)        


hist = model.fit(x_train, y_train, epochs=100, batch_size=10,validation_split=0.2,
                 callbacks=[earlyStopping],verbose=1)



#4. 평가, 예측

#[loss, acc 출력방법 1]
loss, acc = model.evaluate(x_test, y_test)
print('loss : ' , loss)
print('accuracy : ', acc) 

#[loss, acc 출력방법 2]
results = model.evaluate(x_test, y_test)
print('loss : ' , results[0])
print('accuracy : ', results[1]) 

print("----------------------------------------")

from sklearn.metrics import r2_score, accuracy_score  
y_predict = model.predict(x_test)
y_predict = np.argmax(y_predict, axis= 1)
print(y_predict)

y_test = np.argmax(y_test, axis= 1)
print(y_test)

acc= accuracy_score(y_test, y_predict)
print('acc스코어 : ', acc) 

#[결과]
# loss :  0.22638916969299316
# accuracy :  0.9388889074325562
# ----------------------------------------
# [8 1 4 0 4 2 7 4 0 0 0 8 6 0 2 7 5 2 6 1 2 6 3 5 1 3 7 7 3 0 3 2 5 8 6 5 9
#  6 1 7 1 8 7 2 2 3 0 2 5 2 3 6 3 7 0 1 1 2 9 3 6 0 2 3 6 8 7 6 2 5 6 1 8 5
#  0 4 0 4 3 7 8 7 2 7 3 0 5 9 5 1 3 3 0 6 4 4 1 2 4 0 9 8 9 2 6 6 0 1 9 2 1
#  1 0 0 5 7 4 4 2 6 6 3 3 3 6 0 0 7 3 4 0 6 8 2 7 2 6 5 3 2 7 9 7 4 6 5 3 2
#  3 8 4 2 8 9 6 4 3 1 0 8 6 5 0 7 2 3 4 1 1 4 9 4 5 8 2 7 0 5 4 9 4 9 4 2 0
#  5 1 3 2 6 3 8 8 6 7 2 4 2 3 4 6 8 6 6 0 8 7 7 2 0 7 3 1 3 1 9 6 9 2 5 4 7
#  2 9 8 9 3 6 0 1 7 5 9 1 7 5 6 9 9 1 5 1 3 2 6 5 7 7 4 1 4 8 1 5 1 9 9 6 8
#  3 7 0 5 0 9 2 8 5 2 6 9 3 8 3 1 3 5 4 4 8 8 3 0 0 3 4 9 9 3 1 6 1 0 8 0 7
#  2 8 8 9 2 0 0 8 9 1 7 3 6 1 8 6 5 2 0 4 3 7 5 3 2 7 2 2 3 1 5 2 7 0 8 2 8
#  4 4 6 0 2 5 8 4 5 2 0 1 8 3 7 0 2 0 4 6 4 2 2 5 0 0 5]
# [8 1 4 0 4 2 7 4 0 0 0 8 6 0 2 7 5 2 6 1 2 6 3 5 1 3 7 7 3 0 3 2 5 8 6 5 9
#  6 1 7 1 8 7 2 2 3 0 2 5 2 3 6 3 7 0 1 1 2 9 3 6 0 2 3 6 8 7 6 2 5 6 1 8 5
#  0 4 0 4 3 7 8 7 2 7 3 0 5 9 5 1 3 3 0 6 4 0 1 2 4 0 9 8 3 2 6 6 0 1 9 2 1
#  1 0 9 5 7 7 5 2 6 6 3 3 3 6 0 0 7 3 4 0 6 3 8 7 2 6 5 3 2 7 9 7 7 6 5 3 2
#  3 8 4 2 8 9 6 4 3 1 0 8 6 5 0 7 2 3 4 1 1 4 9 4 5 8 2 7 0 5 4 9 4 9 4 2 8
#  5 1 3 2 6 3 8 8 6 7 2 4 2 3 4 6 8 6 6 0 8 4 7 2 0 7 3 1 3 1 9 6 3 2 5 4 7
#  2 9 8 9 3 6 0 1 7 5 9 1 7 5 6 9 9 1 5 1 3 2 6 5 7 4 4 1 4 8 1 5 8 9 9 6 8
#  3 7 0 5 0 9 2 8 5 2 6 5 3 8 3 1 3 5 4 4 8 8 3 0 0 3 0 9 9 3 4 6 1 0 8 0 7
#  2 8 8 9 2 0 0 8 9 1 7 3 6 1 8 6 5 2 0 4 3 7 5 3 3 7 2 2 3 1 5 2 7 0 9 2 8
#  4 4 6 0 1 5 8 4 5 1 0 1 8 3 9 0 2 0 4 6 9 2 2 5 0 0 5]
# acc스코어 :  0.9388888888888889
